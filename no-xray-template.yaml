
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  non-x-ray SAM template

Resources:

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: poc/statemachine
      RetentionInDays: 14

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: poc/apigw
      RetentionInDays: 14


  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"

  StateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "states.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
        - "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
        - "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: $context.requestId
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: 'api/api.yaml'
  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      Logging:
        Destinations:
         - CloudWatchLogsLogGroup:
             LogGroupArn: !GetAtt StateMachineLogGroup.Arn
        Level: ALL
      DefinitionUri: statemachine/asl.json
      Role: !GetAtt StateMachineExecutionRole.Arn
      DefinitionSubstitutions:
        SelectPairFunctionArn: !GetAtt SelectPair.Arn
        VerifyPairFunctionArn: !GetAtt VerifyPair.Arn
        SavePairFunctionArn: !GetAtt SavePair.Arn
        NotifyPairFunctionArn: !GetAtt NotifyPair.Arn

  SelectPair:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/poc-select-pair/
      Handler: app.lambda_handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn

  VerifyPair:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/poc-verify-pair/
      Handler: app.lambda_handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn

  SavePair:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/poc-save-db/
      Handler: app.lambda_handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn

  NotifyPair:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/poc-notify-pair/
      Handler: app.lambda_handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn








